// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  profil    Profil?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profil {
  id        Int      @id @default(autoincrement())
  full_name String?
  photo     String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gateway {
  id                String       @id @default(cuid())
  name              String
  location          String
  apiKey            String
  encryptionKey     String
  transmitFrequency Int
  receiverFrequency Int
  onlineTimeStamp   DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  nodeSensor        SensorNode[] // gateway memiliki 0 atau lebih sensor node
}

model SensorNode {
  id                String                 @id @default(cuid())
  shortName         String                 @unique
  name              String
  location          String
  sensorHeight      Int
  // transistorMapingMin Int
  // transistorMapingMax Int
  // sluiceGateOpenMax   Int
  // sluiceGateOpenMin   Int
  transmitFrequency Int
  receiverFrequency Int
  onlineTimeStamp   DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  record            SensorNodeDataRecord[] // 1 sensor node bisa memiliki banyak record
  instruction       SensorNodeInstruction?
  supportNode       SupportNode? //satu sensor node hanya memiliki 1 support node

  gateway   Gateway @relation(fields: [gatewayId], references: [id])
  gatewayId String
}

model SensorNodeDataRecord {
  id           String     @id @default(cuid())
  waterDepth   Int
  waterFlow    Int
  soilHumidity Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  sensorNode   SensorNode @relation(fields: [sensorNodeId], references: [id])
  sensorNodeId String
}

model SensorNodeInstruction {
  id                        Int       @id @default(autoincrement())
  sluiceGateOpening         Int?      @default(0)
  sluiceGateOpeningDuration Int?      @default(0)
  sluiceGateSchedule        DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  sensorNode   SensorNode @relation(fields: [sensorNodeId], references: [id])
  sensorNodeId String     @unique
}

model SupportNode {
  id                String   @id @default(cuid())
  name              String
  location          String
  transmitFrequency Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  sensorNode   SensorNode? @relation(fields: [sensorNodeId], references: [id])
  sensorNodeId String      @unique
}
